#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("chat-app-api:server");
var http = require("http");
var socketio = require("socket.io");
var Message = require("../models/message");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "9000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketio(server);

io.sockets.on("connection", (socket) => {
  console.log("new socket added : ", socket.id);

  socket.on("join", (roomId) => {
    socket.join(roomId);
  });

  socket.on("message", (data) => {
    const { msg, roomId } = data;
    console.log(msg);
    Message.findById(roomId).exec((err, result) => {
      if (err) {
        console.log(err);
        return;
      }
      if (result) {
        console.log(msg);
        result.chat.push(msg);
        var message = new Message({
          _id: result._id,
          user1: result.user1,
          user2: result.user2,
          chat: result.chat,
        });
        console.log(message.chat);
        Message.findByIdAndUpdate(message._id, message, {}, (err) => {
          if (err) {
            console.log(err);
            return;
          }
          console.log("new msg send");
          socket.broadcast.to(roomId).emit("stopped");
          console.log("newMsgInRoom" + roomId);
          io.in(roomId).emit("newMsg", message.chat[message.chat.length - 1]);
        });
      }
    });
  });

  socket.on("typing", (roomId) => socket.broadcast.to(roomId).emit("typing"));
  socket.on("stopped", (roomId) => socket.broadcast.to(roomId).emit("stopped"));
  socket.on("leaveRoom", (roomId) => socket.leave(roomId));

  socket.on("disconnect", () => {
    console.log(socket.id, " disconnected");
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
